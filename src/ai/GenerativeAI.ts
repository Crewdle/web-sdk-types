import { IJobParameters, IJobResult } from '../job';

/**
 * The AI prompt source Enum
 * @category AI
 */
export enum PromptSource {
  /**
   * The prompt was generated by the AI.
   */
  AI = 'ai',

  /**
   * The prompt was generated by a human.
   */
  Human = 'human',
};

/**
 * The AI prompt history Interface
 * Represents the history of a prompt.
 * @category AI
 */
export interface IPromptHistory {
  /**
   * The source of the prompt.
   */
  source: PromptSource;

  /**
   * The prompt.
   */
  message: string;
};

/**
 * The AI prompt options Interface
 * Represents the options for an AI prompt.
 * @category AI
 */
export interface IPromptOptions {
  /**
   * The instructions for the AI job.
   */
  instructions?: string;

  /**
   * Whether to use RAG for the AI job.
   */
  useRAG?: boolean;

  /**
   * The context for the AI job.
   */
  history?: IPromptHistory[];

  /**
   * The maximum number of tokens to generate.
   */
  maxTokens?: number;

  /**
   * The temperature for the LLM.
   */
  temperature?: number;

  /**
   * The maximum number of contents to include in the context.
   */
  maxContents?: number;

  /**
   * The number of chunks to include in one content.
   */
  maxChunks?: number;

  /**
   * The starting index of the RAG for search.
   */
  ragStartingIndex?: number;

  /**
   * The minimum relevance of the RAG contents.
   */
  minRelevance?: number;
}

/**
 * The AI prompt type text
 */
export type PromptTypeText = string | string[];

/**
 * The AI prompt type vector
 */
export type PromptTypeVector = number[];

/**
 * The AI prompt result Interface
 * Represents the result of an AI prompt.
 * @category AI
 */
export interface IPromptResult {
  /**
   * The output of the AI job.
   */
  output: PromptTypeText | PromptTypeVector;

  /**
   * The tokens used by the AI job.
   */
  inputTokens?: number;

  /**
   * The tokens generated by the AI job.
   */
  outputTokens?: number;

  /**
   * The number of contents in the RAG.
   */
  contentSize?: number;
}

/**
 * The AI job parameters Interface
 * Parameters for AI job type.
 * @category AI
 */
export interface IJobParametersAI extends IJobParameters, IPromptOptions {
  /**
   * The prompt for the AI job.
   */
  prompt: string;
}

/**
 * The AI job result Interface
 * Represents the result of an AI job.
 * @category AI
 */
export interface IJobResultAI extends IJobResult, IPromptResult {
  /**
   * The index of the output, in case of partial results.
   */
  index?: number;
}
